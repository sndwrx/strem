@using Strem.Portals.Data
@using Microsoft.AspNetCore.Components
@using Strem.Core.Extensions
@using Strem.Portals.Extensions
@using Strem.Portals.Types

@inherits ValidatedComponent<Strem.Portals.Data.GridElementData>

<div>
    <span class="title is-3 has-text-black">Editing @Data.Name</span>
    <button class="button is-danger is-pulled-right" @onclick="() => RequestedDeletion.InvokeAsync(Data.Id)">Delete Element</button>
</div>

<EditForm EditContext="EditContext" class="block">
    <div class="field">
        <label class="label">Element Name</label>
        <div class="control">
            <TextInput placeholder="i.e PlaysAMeme" @bind-Value="Data.Name" />
        </div>
    </div>
    <div class="field">
        <label class="label">Element Type</label>
        <div class="control is-expanded">
           <EnumSelectInput @bind-Value="Data.ElementType" />
        </div>
    </div>
    <div class="field">
        <label class="label">Element Text</label>
        <div class="control">
            <TextInput placeholder="i.e Play A Meme" @bind-Value="Data.DefaultStyles.Text"/>
        </div>
    </div>
    <div class="field">
        <label class="label">Background/Button Color</label>
        <div class="control">
            <TextInput type="color" @bind-Value="Data.DefaultStyles.BackgroundColor" />
        </div>
    </div>
    <div class="field">
        <label class="label">Foreground/Text Color</label>
        <div class="control">
            <TextInput type="color" @bind-Value="Data.DefaultStyles.ForegroundColor" />
        </div>
    </div>
    
    <hr />
    
    @if (Data.ElementType == GridElementType.Button)
    {
        <div class="field">
            <div class="control">
                <span class="title is-4 has-text-black">Button Settings</span>
            </div>
        </div>
        <div class="field">
            <label class="label">Element Type</label>
            <div class="control is-expanded">
                <EnumSelectInput T="ButtonType" Value="Data.DefaultStyles.ButtonType()" ValueChanged="x => Data.DefaultStyles.ButtonType(x)" />
            </div>
        </div>
        
        @if (Data.DefaultStyles.ButtonType() == ButtonType.IconButton)
        {
            <label class="label">Icon Style</label>
            <div class="field">
                <div class="control">
                    <IconPicker Value="@Data.DefaultStyles.IconClass()" ValueChanged="x => Data.DefaultStyles.IconClass(x)"></IconPicker>
                </div>
            </div>
        }
        else if (Data.DefaultStyles.ButtonType() == ButtonType.ImageButton)
        {
            <label class="label">Icon Image</label>
            <div class="field">
                <div class="control">
                    <FileInputBrowser FileFilter="Image Files (*.jpg;*.jpeg;*.png;*.gif;)|*.jpg;*.jpeg;*.png;*.gif;" Value="@Data.DefaultStyles.ImageUrl()" ValueChanged="x => Data.DefaultStyles.ImageUrl(x)" placeholder="i.e http://some-site.com/some-image.png or c:/some-file.png" />
                </div>
                <HelperInfo>This can be a url to a file online or a local file, local files need more processing though so the larger they are the longer they will take to load, try to keep sizes below 256x256 pixels</HelperInfo>
            </div>
            <div class="field">
                <div class="control">
                    <figure class="image is-128x128">
                        <img alt="@Data.DefaultStyles.Text" src="@Data.DefaultStyles.ImageUrl().GetImageUrl()" class="is-full" />
                    </figure>
                </div>
            </div>
        }
    }
    else if (Data.ElementType == GridElementType.Slider)
    {
        <div class="field">
            <div class="control">
                <span class="title is-4 has-text-black">Slider Settings</span>
            </div>
        </div>
        <label class="label">Grid Size</label>
        <div class="field">
            <div class="control">
                <IntInput Value="@Data.DefaultStyles.CellSize()" ValueChanged="x => Data.DefaultStyles.CellSize(x)" Min="1" Max="6" Step="1" />
            </div>
            <HelperInfo>This is how many cells in the grid the slider should take up 2 being the default</HelperInfo>
        </div>
        <label class="label">Min Slider Value</label>
        <div class="field">
            <div class="control">
                <IntInput Value="@Data.MinValue()" ValueChanged="x => Data.MinValue(x)" />
            </div>
        </div>
        <div class="field">
            <div class="control">
                <IntInput Value="@Data.MaxValue()" ValueChanged="x => Data.MaxValue(x)" />
            </div>
        </div>
    }
    
    @if (!IsValid)
    {
        <ValidationMessageContainer Messages="EditContext.GetValidationMessages()"/>
    }
</EditForm>
<div class="field">
    <div class="control">
        <button class="button is-primary" @onclick="() => OnClosed.InvokeAsync()">Close</button>
    </div>
</div>

@code 
{
    [Parameter] public EventCallback OnClosed { get; set; }
    [Parameter] public EventCallback<Guid> RequestedDeletion { get; set; }
}