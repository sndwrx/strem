@using Strem.Twitch.Types
@using Strem.Core.Types

<div class="box">
    <div class="columns">
        <div class="column">
            <div class="field">
                <label class="label">Chat Permissions</label>
                <div class="control">
                    <EnumSelectInput Value="@ChatAccess" ValueChanged="(ScopeAccess v) => { ChatAccess = v; RequestScopeChange(); }"/>
                </div>
                 <HelperInfo>Chat permissions cover being able to read/manage chat messages and whispers</HelperInfo>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">Channel Permissions</label>
                <div class="control">
                    <EnumSelectInput Value="@ChannelAccess" ValueChanged="(ScopeAccess v) => { ChannelAccess = v; RequestScopeChange(); }"/>
                </div>
                <HelperInfo>Channel permissions cover being able to read/manage channel titles, games, clips, redemptions etc</HelperInfo>
            </div>
        </div>
    </div>
    <div class="columns">
        <div class="column">
            <div class="field">
                <label class="label">Moderation Permissions</label>
                <div class="control">
                    <EnumSelectInput Value="@ModerationAccess" ValueChanged="(ScopeAccess v) => { ModerationAccess = v; RequestScopeChange(); }"/>
                </div>
                <HelperInfo>Moderation permissions cover being able to manage banned users, blocked terms, chat room settings etc</HelperInfo>
            </div>
        </div>
        <div class="column">
            <div class="field">
                <label class="label">User Permissions</label>
                <div class="control">
                    <EnumSelectInput Value="@UserAccess" ValueChanged="(ScopeAccess v) => { UserAccess = v; RequestScopeChange(); }"/>
                </div>
                <HelperInfo>User permissions cover being able to read/manage followers, blocked users, user settings etc</HelperInfo>
            </div>
        </div>
    </div>
</div>

@code {

    public ScopeAccess ChatAccess { get; set; }
    public ScopeAccess ChannelAccess { get; set; }
    public ScopeAccess ModerationAccess { get; set; }
    public ScopeAccess UserAccess { get; set; }
    
    [Parameter]
    public string[] ExistingScopes { get; set; } = Array.Empty<string>();
    
    [Parameter]
    public EventCallback<string[]> OnScopesChanged { get; set; }

    public bool HasScopesFor(string[] requiredScopes)
    {
        return requiredScopes.All(x => ExistingScopes.Contains(x));
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (HasScopesFor(ScopeCollections.ManageChatScopes)){ ChatAccess = ScopeAccess.Full; }
        else if(HasScopesFor(ScopeCollections.ReadChatScopes)) { ChatAccess = ScopeAccess.ReadOnly; }
        else { ChatAccess = ScopeAccess.None; }
        
        if (HasScopesFor(ScopeCollections.ManageChannelScopes)){ ChannelAccess = ScopeAccess.Full; }
        else if(HasScopesFor(ScopeCollections.ReadChannelScopes)) { ChannelAccess = ScopeAccess.ReadOnly; }
        else { ChannelAccess = ScopeAccess.None; }
        
        if (HasScopesFor(ScopeCollections.ManageUserScopes)){ UserAccess = ScopeAccess.Full; }
        else if(HasScopesFor(ScopeCollections.ReadUserScopes)) { UserAccess = ScopeAccess.ReadOnly; }
        else { UserAccess = ScopeAccess.None; }
        
        if (HasScopesFor(ScopeCollections.ManageModerationScopes)){ ModerationAccess = ScopeAccess.Full; }
        else if(HasScopesFor(ScopeCollections.ReadModerationScopes)) { ModerationAccess = ScopeAccess.ReadOnly; }
        else { ModerationAccess = ScopeAccess.None; }
    }

    public void RequestScopeChange()
    {
        var newScopes = new List<string>();
        switch (ChatAccess)
        {
            case ScopeAccess.Full:
                newScopes.AddRange(ScopeCollections.ReadChatScopes);
                newScopes.AddRange(ScopeCollections.ManageChatScopes);
                break;
            case ScopeAccess.ReadOnly:
                newScopes.AddRange(ScopeCollections.ReadChatScopes);
                break;
        }
        
        switch (ChannelAccess)
        {
            case ScopeAccess.Full:
                newScopes.AddRange(ScopeCollections.ReadChannelScopes);
                newScopes.AddRange(ScopeCollections.ManageChannelScopes);
                break;
            case ScopeAccess.ReadOnly:
                newScopes.AddRange(ScopeCollections.ReadChannelScopes);
                break;
        }

        switch (ModerationAccess)
        {
            case ScopeAccess.Full:
                newScopes.AddRange(ScopeCollections.ReadModerationScopes);
                newScopes.AddRange(ScopeCollections.ManageModerationScopes);
                break;
            case ScopeAccess.ReadOnly:
                newScopes.AddRange(ScopeCollections.ReadChannelScopes);
                break;
        }

        switch (UserAccess)
        {
            case ScopeAccess.Full:
                newScopes.AddRange(ScopeCollections.ReadUserScopes);
                newScopes.AddRange(ScopeCollections.ManageUserScopes);
                break;
            case ScopeAccess.ReadOnly:
                newScopes.AddRange(ScopeCollections.ReadUserScopes);
                break;
        }

        OnScopesChanged.InvokeAsync(newScopes.ToArray());
    }
}